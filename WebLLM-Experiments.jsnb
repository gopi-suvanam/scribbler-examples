{
  "metadata": {
    "name": "Web LLM Example",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "//>md\n# LLM in the borwser using WebLLM\n\nThis is an example of how an LLM can be used safely in the browser without the need for servers or external services. This proves one can use AI in edge computing. This particular notebook requires GPU with atleast 8GB of VRAM.\n\nReferance: [Web LLM Github](https://github.com/mlc-ai/web-llm)\n\t\t\t\t\t\t\t\nNote: The notebook takes 3-4 four minutes to load the LLM for the first time. Next time onwards it will only take 25 seconds as the model is cached. Simple queries are taking 3-5 seconds.",
      "status": "",
      "output": "<h1>LLM in the borwser using WebLLM</h1>\n<p>This is an example of how an LLM can be used safely in the browser without the need for servers or external services. This proves one can use AI in edge computing. This particular notebook requires GPU with atleast 8GB of VRAM.</p>\n<p>Referance: <a href=\"https://github.com/mlc-ai/web-llm\">Web LLM Github</a></p>\n<p>Note: The notebook takes 3-4 four minutes to load the LLM for the first time. Next time onwards it will only take 25 seconds as the model is cached. Simple queries are taking 3-5 seconds.</p>\n",
      "type": "html"
    },
    {
      "code": "\nif(scrib.isSandboxed()) scrib.show(\"<p style='color:red' >You will have to take the notebook out of sandbox by clicking the red â¤¯ button at the top right corner and then enter the phrase 'I trust'. Do this only if you got the notebook from a trusted source</p>\")",
      "status": "[1]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "webllm = await import(\"https://cdn.jsdelivr.net/npm/@mlc-ai/web-llm@0.2.72/lib/index.min.js\");",
      "status": "[2]<br><span style=\"font-size:8px\">21ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "<h2>Loading Progress</h2>\n<progress id=\"loading-progress-bar\" value=\"0\" max=\"1\"></progress>\n<span id=\"loading-progress-text\">0%</span>\n",
      "status": "",
      "output": "<h2>Loading Progress</h2>\n<progress id=\"loading-progress-bar\" value=\"1\" max=\"1\"></progress>\n<span id=\"loading-progress-text\">100%</span>\n",
      "type": "html"
    },
    {
      "code": "\n\n// Callback function to update model loading progress\nconst progressBar = document.getElementById('loading-progress-bar');\nconst progressText = document.getElementById('loading-progress-text');\nconst initProgressCallback = (initProgress) => {\n  const progressValue = initProgress.progress;\n  progressBar.value = progressValue;\n  progressText.textContent = `${Math.round(progressValue * 100)}%`;\n}\n\nconst selectedModel = \"Llama-3.1-8B-Instruct-q4f32_1-MLC\";\nprogressText.textContent = \"Initializing : 0%\"\nconst engine = await webllm.CreateMLCEngine(\n  selectedModel,\n  { initProgressCallback: initProgressCallback }, // engineConfig\n);\nwindow.engine=engine;",
      "status": "[3]<br><span style=\"font-size:8px\">26.725s<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "<input type=\"text\" id=\"query\" value=\"Give code for Palindrome in JavaScript\"></input>",
      "status": "",
      "output": "<input type=\"text\" id=\"query\" value=\"Give code for Palindrome in JavaScript\">",
      "type": "html"
    },
    {
      "code": "let query=document.getElementById('query').value;\nconst messages = [\n  { role: \"system\", content: \"You are a helpful AI assistant.\" },\n  { role: \"user\", content: query},\n]\n\n// Chunks is an AsyncGenerator object\nconst chunks = await engine.chat.completions.create({\n  messages,\n  temperature: 1,\n  stream: true, // <-- Enable streaming\n  stream_options: { include_usage: true },\n});\n\nlet reply = \"\";\nfor await (const chunk of chunks) {\n  reply += chunk.choices[0]?.delta.content || \"\";\n  \n\tscrib.currCell().innerHTML= marked.marked(reply);\n\n}\n\n//scrib.show(reply.usage);",
      "status": "[9]<br><span style=\"font-size:8px\">15.593s<span></span></span>",
      "output": "<h1><strong>Palindrome Detection in JavaScript</strong></h1>\n<p>A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.</p>\n<p>Here's a simple JavaScript function that takes a string as input and returns <code>true</code> if it's a palindrome, and <code>false</code> otherwise:</p>\n<pre><code class=\"language-javascript\">function isPalindrome(str) {\n  str = str.toLowerCase(); // ignore case\n  let i = 0, j = str.length - 1; // initialize pointers\n\n  while (i &lt; j) {\n    if (str[i] !== str[j]) {\n      return false; // mismatch found\n    }\n    i++; // move left pointer\n    j--; // move right pointer\n  }\n\n  return true; // no mismatches found\n}\n\n// Example usage:\nconsole.log(isPalindrome(\"Madam\")); // true\nconsole.log(isPalindrome(\"hello\")); // false\n</code></pre>\n<p>This function works by comparing characters from the start and end of the string, moving towards the center. If it finds any mismatch, it immediately returns <code>false</code>. If the entire string is compared without any mismatches, it returns <code>true</code>.</p>\n<p>You can also use a more concise and modern approach with JavaScript's built-in <code>Array</code> methods:</p>\n<pre><code class=\"language-javascript\">function isPalindrome(str) {\n  return str.toLowerCase() === str.split('').reverse().join('');\n}\n</code></pre>\n<p>This function converts the string to lowercase, splits it into an array of characters, reverses the array, and joins it back into a string. If the original string is equal to the reversed string, it's a palindrome, and the function returns <code>true</code>. Otherwise, it returns <code>false</code>.</p>\n",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": true
}