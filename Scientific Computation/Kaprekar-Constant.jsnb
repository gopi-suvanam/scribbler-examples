{
  "metadata": {
    "name": "Kaprekar Constant",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "//>md\n# Kaprekar's Constant\n\n\nKaprekar's constant is a mathematical curiosity discovered by Indian mathematician D.R. Kaprekar in 1946. It is a unique constant that can be reached from any 4-digit number using a simple iterative process.\n\n\nThe Process:\n\n1. Arrange the digits in ascending and descending order.\n2. Subtract the smaller number from the larger.\n3. Repeat steps 1-2.\n\n\nThe Result:\n\nRegardless of the starting number, this process will eventually converge to:\n\n\n6174\n\n\nKaprekar's constant has fascinated mathematicians and number theorists due to its:\n\n\n- Universality: Works for all 4-digit numbers.\n- Uniqueness: Only constant reached through this process.\n- Simplicity: Easy to calculate.\n\n\nThis phenomenon has sparked research in number theory, algebra, and combinatorics, inspiring new mathematical discoveries and explorations.",
      "status": "",
      "output": "<h1>Kaprekar's Constant</h1>\n<p>Kaprekar's constant is a mathematical curiosity discovered by Indian mathematician D.R. Kaprekar in 1946. It is a unique constant that can be reached from any 4-digit number using a simple iterative process.</p>\n<p>The Process:</p>\n<ol>\n<li>Arrange the digits in ascending and descending order.</li>\n<li>Subtract the smaller number from the larger.</li>\n<li>Repeat steps 1-2.</li>\n</ol>\n<p>The Result:</p>\n<p>Regardless of the starting number, this process will eventually converge to:</p>\n<p>6174</p>\n<p>Kaprekar's constant has fascinated mathematicians and number theorists due to its:</p>\n<ul>\n<li>Universality: Works for all 4-digit numbers.</li>\n<li>Uniqueness: Only constant reached through this process.</li>\n<li>Simplicity: Easy to calculate.</li>\n</ul>\n<p>This phenomenon has sparked research in number theory, algebra, and combinatorics, inspiring new mathematical discoveries and explorations.</p>\n",
      "type": "html"
    },
    {
      "code": "//>md\nThe code below:\n\n\n1. Checks if the input is a 4-digit number.\n2. Enters a loop until Kaprekar's constant (6174) is reached.\n3. Inside the loop:\n    - Sorts the digits in ascending and descending order.\n    - Subtracts the smaller number from the larger.\n    - Increments the iteration counter.\n4. Logs the number of iterations and returns Kaprekar's constant.\n\n\nNote that this function assumes the input is a positive 4-digit integer. If you want to extend it to other types of numbers, additional error checking and handling would be necessary.\n\n\nAlso, keep in mind that Kaprekar's constant only works for 4-digit numbers with at least two distinct digits. If the input number has fewer than 4 digits or only one distinct digit, the function will not terminate correctly.",
      "status": "",
      "output": "<p>The code below:</p>\n<ol>\n<li>Checks if the input is a 4-digit number.</li>\n<li>Enters a loop until Kaprekar's constant (6174) is reached.</li>\n<li>Inside the loop:<ul>\n<li>Sorts the digits in ascending and descending order.</li>\n<li>Subtracts the smaller number from the larger.</li>\n<li>Increments the iteration counter.</li>\n</ul>\n</li>\n<li>Logs the number of iterations and returns Kaprekar's constant.</li>\n</ol>\n<p>Note that this function assumes the input is a positive 4-digit integer. If you want to extend it to other types of numbers, additional error checking and handling would be necessary.</p>\n<p>Also, keep in mind that Kaprekar's constant only works for 4-digit numbers with at least two distinct digits. If the input number has fewer than 4 digits or only one distinct digit, the function will not terminate correctly.</p>\n",
      "type": "html"
    },
    {
      "code": "function kaprekarConstant(n) {\n  if (n.toString().length !== 4) {\n    throw new Error(\"Input must be a 4-digit number.\");\n  }\n  n_prev=n;\n  let iterations = 0;\n  while (true) {\n    const asc = parseInt(n.toString().split('').sort().join(''));\n    const desc = parseInt(n.toString().split('').sort((a, b) => b - a).join(''));\n    n_prev=n;\n\tn = desc - asc;\n\n\tif(n_prev==n) return {iterations,n}; \n\t iterations++;\n  }\n\n}\n",
      "status": "[6]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "kaprekarConstant(2022)",
      "status": "[7]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "{\n  \"iterations\": 4,\n  \"n\": 6174\n} <br>",
      "type": "code"
    },
    {
      "code": "kaprekarConstant(1233)",
      "status": "[8]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "{\n  \"iterations\": 3,\n  \"n\": 6174\n} <br>",
      "type": "code"
    },
    {
      "code": "kaprekarConstant(7856)",
      "status": "[9]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "{\n  \"iterations\": 3,\n  \"n\": 6174\n} <br>",
      "type": "code"
    },
    {
      "code": "kaprekarConstant(6174)",
      "status": "[10]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "{\n  \"iterations\": 0,\n  \"n\": 6174\n} <br>",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": true
}