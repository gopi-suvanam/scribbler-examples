{
  "metadata": {
    "name": "CHAID Experiments",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "//>md\n# Decision Tree Construction and Prediction\n\n## Overview\n\nThis document describes the process of constructing a decision tree and making predictions using the tree. The decision tree is built using a recursive algorithm that selects the best attribute to split the data at each node.\n\n\n## Decision Tree Construction\n\n### Step 1: Data Preparation\n\n- Collect and preprocess dataset\n- Split data into training and testing sets\n\n### Step 2: Find Best Attribute to Split\n\n- Calculate observed and expected frequencies for each attribute\n- Compute chi-squared statistic for each attribute\n- Select attribute with highest chi-squared statistic as best attribute\n\n### Step 3: Recursively Build Tree\n\n- Split data based on best attribute\n- Recursively build child nodes for each attribute value\n- Stop recursion when:\n    - All instances belong to same class (leaf node)\n    - No more attributes to split on\n    - Maximum tree depth reached\n\n### Step 4: Merge Categories and Calculate Frequencies\n\n- Merge similar categories based on Bhattacharyya similarity\n- Calculate target value frequencies for each node\n\n\n## Prediction\n\n### Step 1: Traverse Decision Tree\n\n- Start at root node\n- Follow child nodes based on attribute values\n- Stop at leaf node\n\n### Step 2: Make Prediction\n\n- Return target value frequencies at leaf node\n\n\n## Functions\n\n_findBestSplit_\n\n- Finds best attribute to split data\n- Returns object containing best attribute, merged frequencies, and chi-squared statistic\n\n_buildTree_\n\n- Recursively builds decision tree\n- Returns decision tree object\n\n_predict_\n\n- Makes prediction using decision tree\n- Returns predicted target value frequencies",
      "status": "",
      "output": "<h1>Decision Tree Construction and Prediction</h1>\n<h2>Overview</h2>\n<p>This document describes the process of constructing a decision tree and making predictions using the tree. The decision tree is built using a recursive algorithm that selects the best attribute to split the data at each node.</p>\n<h2>Decision Tree Construction</h2>\n<h3>Step 1: Data Preparation</h3>\n<ul>\n<li>Collect and preprocess dataset</li>\n<li>Split data into training and testing sets</li>\n</ul>\n<h3>Step 2: Find Best Attribute to Split</h3>\n<ul>\n<li>Calculate observed and expected frequencies for each attribute</li>\n<li>Compute chi-squared statistic for each attribute</li>\n<li>Select attribute with highest chi-squared statistic as best attribute</li>\n</ul>\n<h3>Step 3: Recursively Build Tree</h3>\n<ul>\n<li>Split data based on best attribute</li>\n<li>Recursively build child nodes for each attribute value</li>\n<li>Stop recursion when:<ul>\n<li>All instances belong to same class (leaf node)</li>\n<li>No more attributes to split on</li>\n<li>Maximum tree depth reached</li>\n</ul>\n</li>\n</ul>\n<h3>Step 4: Merge Categories and Calculate Frequencies</h3>\n<ul>\n<li>Merge similar categories based on Bhattacharyya similarity</li>\n<li>Calculate target value frequencies for each node</li>\n</ul>\n<h2>Prediction</h2>\n<h3>Step 1: Traverse Decision Tree</h3>\n<ul>\n<li>Start at root node</li>\n<li>Follow child nodes based on attribute values</li>\n<li>Stop at leaf node</li>\n</ul>\n<h3>Step 2: Make Prediction</h3>\n<ul>\n<li>Return target value frequencies at leaf node</li>\n</ul>\n<h2>Functions</h2>\n<p><em>findBestSplit</em></p>\n<ul>\n<li>Finds best attribute to split data</li>\n<li>Returns object containing best attribute, merged frequencies, and chi-squared statistic</li>\n</ul>\n<p><em>buildTree</em></p>\n<ul>\n<li>Recursively builds decision tree</li>\n<li>Returns decision tree object</li>\n</ul>\n<p><em>predict</em></p>\n<ul>\n<li>Makes prediction using decision tree</li>\n<li>Returns predicted target value frequencies</li>\n</ul>\n",
      "type": "html"
    },
    {
      "code": "/**\n * Calculates the chi-squared statistic.\n * \n * @param {Array<number>} observed - Observed frequencies.\n * @param {Array<number>} expected - Expected frequencies.\n * @returns {number} Chi-squared statistic value.\n */\nfunction chiSquared(observed, expected) {\n  // Initialize chi-squared statistic to 0.\n  let chiSq = 0;\n\n  // Iterate over observed frequencies.\n  for (let i in observed) {\n    // For each category, calculate the squared difference between observed and expected frequencies,\n    // divided by the expected frequency. Add to the total chi-squared statistic.\n    chiSq += Math.pow(observed[i] - (expected[i] || 0), 2) / (expected[i] || 0);\n  }\n\n  // Return the calculated chi-squared statistic.\n  return chiSq;\n}\n\n\n/**\n * Calculates observed and expected frequencies for a given attribute and target.\n * \n * @param {Array<Object>} data - Dataset.\n * @param {string} attribute - Attribute to split data by.\n * @param {string} target - Target variable.\n * @returns {Object} Object containing observed frequencies, expected frequencies, and raw frequencies.\n */\nfunction getFrequencies(data, attribute, target) {\n  // Initialize frequency counters.\n  let frequencies = {};\n  let targetTotals = {};\n\n  // Iterate over data to count frequencies.\n  data.forEach(row => {\n    let attrValue = row[attribute];\n    let targetValue = row[target];\n\n    // Initialize frequency object for attribute value if needed.\n    if (!frequencies[attrValue]) {\n      frequencies[attrValue] = {};\n    }\n\n    // Initialize frequency counter for attribute-target pair if needed.\n    if (!frequencies[attrValue][targetValue]) {\n      frequencies[attrValue][targetValue] = 0;\n    }\n\n    // Increment frequency counter.\n    frequencies[attrValue][targetValue]++;\n\n    // Initialize target total counter if needed.\n    if (!targetTotals[targetValue]) {\n      targetTotals[targetValue] = 0;\n    }\n\n    // Increment target total counter.\n    targetTotals[targetValue]++;\n  });\n\n  // Initialize observed and expected frequency objects.\n  let observed = {};\n  let expected = {};\n\n  // Calculate observed and expected frequencies.\n  for (let attrValue in frequencies) {\n    // Calculate total frequency for attribute value.\n    let total = Object.values(frequencies[attrValue]).reduce((a, b) => a + b, 0);\n\n    for (let targetValue in targetTotals) {\n      // Calculate observed frequency.\n      observed[attrValue + \":\" + targetValue] = frequencies[attrValue][targetValue] || 0;\n\n      // Calculate expected frequency using total and target totals.\n      expected[attrValue + \":\" + targetValue] = (total * targetTotals[targetValue]) / data.length;\n\n      // Normalize frequency for attribute-target pair.\n      if (targetValue in frequencies[attrValue]) {\n        frequencies[attrValue][targetValue] = frequencies[attrValue][targetValue] / total;\n      }\n    }\n  }\n\n  // Return observed frequencies, expected frequencies, and raw frequencies.\n  return { observed, expected, frequencies };\n}\n\n/**\n * Calculates Bhattacharyya similarity coefficient between two probability distributions.\n * \n * @param {Object<number>} dict1 - First probability distribution.\n * @param {Object<number>} dict2 - Second probability distribution.\n * @returns {number} Bhattacharyya similarity coefficient (0 ≤ BC ≤ 1).\n */\nfunction bhattacharyyaSimilarity(dict1, dict2) {\n  // Initialize Bhattacharyya coefficient.\n  let bc = 0;\n\n  // Calculate sum of probabilities for each distribution.\n  const sum1 = Object.values(dict1).reduce((a, b) => a + b, 0);\n  const sum2 = Object.values(dict2).reduce((a, b) => a + b, 0);\n\n  // Iterate over keys in dict1.\n  for (let key in dict1) {\n    // Calculate Bhattacharyya coefficient for each corresponding probability pair.\n    bc += Math.sqrt((dict1[key] * (dict2[key] || 0)) / (sum1 * sum2));\n  }\n\n  // Return Bhattacharyya similarity coefficient.\n  return bc;\n}\n\n/**\n * Finds the best attribute to split a node in a decision tree.\n * \n * @param {Array<Object>} data - Dataset.\n * @param {Array<string>} attributes - Available attributes.\n * @param {string} target - Target variable.\n * @returns {Object} Object containing best attribute, merged frequencies, and chi-squared statistic.\n */\nfunction findBestSplit(data, attributes, target) {\n  // Initialize variables.\n  let bestAttribute = null;\n  let bestChiSq = 0;\n  let bestFrequencies = {};\n\n  // Iterate over attributes.\n  attributes.forEach(attribute => {\n    // Calculate observed and expected frequencies for attribute.\n    let { observed, expected, frequencies } = getFrequencies(data, attribute, target);\n\n    // Calculate chi-squared statistic.\n    let chiSq = chiSquared(observed, expected);\n\n    // Update best attribute if chi-squared statistic improves.\n    if (chiSq > bestChiSq) {\n      bestChiSq = chiSq;\n      bestFrequencies = mergeCategories(frequencies);\n      bestAttribute = attribute;\n    }\n  });\n\n  // Store best attribute in frequencies object.\n  bestFrequencies['bestAttribute'] = bestAttribute;\n\n  // Return best frequencies and attribute.\n  return bestFrequencies;\n}\n\n/**\n * Combines two frequency dictionaries by summing corresponding values.\n * \n * @param {Object<number>} targetFrequencies1 - First frequency dictionary.\n * @param {Object<number>} targetFrequencies2 - Second frequency dictionary.\n * @returns {Object<number>} Combined frequency dictionary.\n */\nfunction combineFrequencies(targetFrequencies1, targetFrequencies2) {\n  // Get all unique keys from both dictionaries.\n  const allKeys = [...new Set([...Object.keys(targetFrequencies1), ...Object.keys(targetFrequencies2)])];\n\n  // Initialize the result dictionary.\n  const result = {};\n\n  // Iterate through each key and sum the values from both dictionaries.\n  allKeys.forEach(key => {\n    // Use || 0 to default to 0 if key is missing in either dictionary.\n    result[key] = (targetFrequencies1[key] || 0) + (targetFrequencies2[key] || 0);\n  });\n\n  // Return the combined frequency dictionary.\n  return result;\n}\n\n\n\n\n\n/**\n * Merges similar categories in a frequency dictionary based on Bhattacharyya similarity.\n * \n * @param {Object<Object<number>>} frequencies - Frequency dictionary with categories as keys.\n * @returns {Object} Object containing merged frequency dictionary, category-to-group mapping, and group-to-categories mapping.\n */\nfunction mergeCategories(frequencies) {\n  // Initialize variables.\n  let categories = Object.keys(frequencies);\n  let merged = {};\n  let categoryToGroup = {};\n  let groupToCategories = {};\n  let groupFrequencies = {};\n\n  // Iterate over categories.\n  for (let i = 0; i < categories.length; i++) {\n    // Skip already merged categories.\n    if (categoryToGroup[categories[i]]) continue;\n\n    // Initialize category-to-group and group-to-categories mappings.\n    categoryToGroup[categories[i]] = categories[i];\n    groupToCategories[categories[i]] = [categories[i]];\n\n    // Compare with remaining categories.\n    for (let j = i + 1; j < categories.length; j++) {\n      // Skip already merged categories.\n      if (categoryToGroup[categories[j]]) continue;\n\n      // Calculate Bhattacharyya similarity.\n      let similarity = bhattacharyyaSimilarity(frequencies[categories[i]], frequencies[categories[j]]);\n\n      // Merge categories if similarity exceeds threshold (adjust as needed).\n      if (similarity > 0.9) {\n        categoryToGroup[categories[j]] = categories[i];\n        groupToCategories[categories[i]].push(categories[j]);\n      }\n    }\n  }\n    // Return merged frequency dictionary, category-to-group mapping, and group-to-categories mapping.\n  return { groupFrequencies, categoryToGroup, groupToCategories };\n\n}",
      "status": "[16]<br><span style=\"font-size:8px\">4ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "/**\n * Recursively builds a decision tree.\n * \n * @param {Array<Object>} data - Dataset.\n * @param {Array<string>} attributes - Available attributes.\n * @param {string} target - Target variable.\n * @param {number} [maxDepth=3] - Maximum tree depth.\n * @param {number} [minLeaf=1] - Minimum instances per leaf.\n * @returns {Object|null} Decision tree node or null.\n */\nfunction buildTree(data, attributes, target, maxDepth = 3, minLeaf = 1) {\n  // Base cases: no attributes, no data, or max depth reached.\n  if (attributes.length === 0 || data.length === 0 || maxDepth == 0) {\n    return null;\n  }\n\n  // Find best attribute to split data.\n  let {\n    bestAttribute,\n    categoryToGroup,\n    groupFrequencies,\n    groupToCategories\n  } = findBestSplit(data, attributes, target);\n\n  // No suitable attribute found.\n  if (!bestAttribute) {\n    return null;\n  }\n\n  // Initialize node.\n  let node = {\n    attribute: bestAttribute,\n    children: {},\n    isLeaf: true\n  };\n\n  // Store target value frequencies.\n  node['value'] = getTargetFrequencies(data, target);\n\n  // Store category grouping information.\n  node['categoryToGroup'] = categoryToGroup;\n\n  // Recursively build child nodes.\n  Object.keys(groupFrequencies).forEach(group => {\n    const subset = data.filter(row => categoryToGroup[row[bestAttribute]] == group);\n\n    // Only recurse if subset has enough instances and depth allows.\n    if (subset.length > minLeaf && maxDepth > 0) {\n      const child = buildTree(\n        subset,\n        attributes.filter(attr => attr !== bestAttribute),\n        target,\n        maxDepth - 1\n      );\n\n      // Add child node if it exists.\n      if (child) {\n        node.children[bestAttribute + \":\" + group] = child;\n      }\n    }\n  });\n\n  // Mark node as leaf if no children.\n  node['isLeaf'] = Object.keys(node.children).length === 0;\n\n  console.log(\"Returning one node\");\n\n  return node;\n}\n\n/**\n * Finds the best attribute to split a node in a decision tree.\n * \n * @param {Array<Object>} data - Dataset.\n * @param {Array<string>} attributes - Available attributes.\n * @param {string} target - Target variable.\n * @returns {Object} Object containing best attribute, merged frequencies, and chi-squared statistic.\n */\nfunction findBestSplit(data, attributes, target) {\n  // Initialize variables.\n  let bestAttribute = null;\n  let bestChiSq = 0;\n  let bestFrequencies = {};\n\n  // Iterate over attributes.\n  attributes.forEach(attribute => {\n    // Calculate observed and expected frequencies for attribute.\n    let { observed, expected, frequencies } = getFrequencies(data, attribute, target);\n\n    // Calculate chi-squared statistic.\n    let chiSq = chiSquared(observed, expected);\n\n    // Update best attribute if chi-squared statistic improves.\n    if (chiSq > bestChiSq) {\n      bestChiSq = chiSq;\n      bestFrequencies = mergeCategories(frequencies);\n      bestAttribute = attribute;\n    }\n  });\n\n  // Store best attribute in frequencies object.\n  bestFrequencies['bestAttribute'] = bestAttribute;\n\n  // Return best frequencies and attribute.\n  return bestFrequencies;\n}\n\n\n  \n/**\n * Calculates the frequency of each target value in a dataset.\n * \n * @param {Array<Object>} data - Dataset.\n * @param {string} target - Target variable.\n * @returns {Object<number>} Object with target values as keys and frequencies as values.\n */\nfunction getTargetFrequencies(data, target) {\n  // Initialize object to store target value frequencies.\n  let targetCounts = {};\n\n  // Total number of data points.\n  const totalCount = data.length;\n\n  // Iterate over data points.\n  data.forEach(row => {\n    // Initialize count for target value if needed.\n    if (!targetCounts[row[target]]) {\n      targetCounts[row[target]] = 0;\n    }\n\n    // Increment count and normalize by total count.\n    targetCounts[row[target]] += 1 / totalCount;\n  });\n\n  // Return object with target value frequencies.\n  return targetCounts;\n}\n\n\n",
      "status": "[17]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "/**\n* Predicts the target value for a single instance using the decision tree.\n * \n * @param {Object} tree - Decision tree.\n * @param {Object} instance - Instance to predict.\n * @returns {Object|null} Predicted target value frequencies or null.\n */\nfunction predict(tree, instance) {\n  // Leaf node: return target value frequencies.\n  if (tree.isLeaf) {\n    return tree.value;\n  }\n\n  // Get attribute value from instance.\n  let attrValue = instance[tree.attribute];\n\n  // Get child node based on attribute value and category grouping.\n  let childNode = tree.children[tree.attribute + \":\" + tree['categoryToGroup'][attrValue]];\n\n  // No child node found: return null or default value.\n  if (!childNode) {\n    // Consider returning the most common target value in the current node instead of null.\n    // return getMostCommonTargetValue(tree.value);\n    return null;\n  }\n\n  // Recursively predict using child node.\n  return predict(childNode, instance);\n}\n",
      "status": "[18]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "//>md\n## We will use the model in a toy problem",
      "status": "",
      "output": "<h2>We will use the model in a toy problem</h2>\n",
      "type": "html"
    },
    {
      "code": "// Example usage\nlet data = [\n    { color: 'red', size: 'small', shape: 'circle', label: 'A' },\n    { color: 'red', size: 'large', shape: 'square', label: 'B' },\n    { color: 'blue', size: 'small', shape: 'circle', label: 'A' },\n    { color: 'blue', size: 'large', shape: 'square', label: 'B' },\n    { color: 'green', size: 'small', shape: 'triangle', label: 'A' },\n    { color: 'green', size: 'large', shape: 'triangle', label: 'C' },\n    // Add more data points as needed\n];\nlet attributes = ['color', 'size', 'shape'];\nlet target = 'label';\n\nlet tree = buildTree(data, attributes, target);\n\n// Test the prediction function\nlet testInstance = { color: 'blue', size: 'small', shape: 'circle' };\nlet predictedLabel = predict(tree, testInstance);\n//console.log(`Predicted label for the test instance: ${predictedLabel}`);\npredictedLabel",
      "status": "[20]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "{\n  \"A\": 0.5,\n  \"B\": 0.3333333333333333,\n  \"C\": 0.16666666666666666\n} <br>",
      "type": "code"
    },
    {
      "code": "//>md\n## Below code uses the trees to predict tokens in a text",
      "status": "",
      "output": "<h2>Below code uses the trees to predict tokens in a text</h2>\n",
      "type": "html"
    },
    {
      "code": "async function fetchTextFromUrl(url) {\n        const response = await fetch(url);\n        return await response.text();\n\n}\n\nfunction createRollingDictionary(text, windowLength) {\n    const sentences = text.split('.'); // Split text into sentences (assuming period as sentence separator)\n    const rollingDictList = [];\n    \n    sentences.forEach((sentence, index) => {\n        const words = sentence.trim().toLowerCase().split(/\\s+/); // Convert to lowercase and split sentence into words (handling multiple spaces)\n        for (let i = 0; i <= words.length - windowLength; i++) {\n            const windowWords = words.slice(i, i + windowLength);\n             rollingDictList.push(windowWords.reverse());\n        }\n       \n    });\n    \n    return rollingDictList;\n}\n",
      "status": "[22]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "\n// Example usage\nvar windowLength = 10; // Example window length\nvar rollingDictList;\nscrib.uploadFile()\n    .then(text => {\n        if (text) {\n\t\t    scrib.show(\"loading etxt:\",text.length);\n             rollingDictList = createRollingDictionary(text, windowLength);\n            scrib.show(\"List of Rolling Dictionaries:\",rollingDictList);\n           \n        } else {\n            scrib.show(\"Failed to fetch text from URL.\");\n        }\n    })\n    .catch(error => scrib.show('Error:', error.message));\n",
      "status": "[*]",
      "output": "",
      "type": "code"
    },
    {
      "code": "var data=rollingDictList.slice(10000,20000);\nvar attributes=range(1,windowLength);\nvar target=0;\nvar maxDepth=10;\nvar minLeaf=10;",
      "status": "[6]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "function generateSamples(data, numSamples,sampleLength) {\n    let samples = [];\n    let  dataLength= data.length;\n    for (let i = 0; i < numSamples; i++) {\n        let sample = [];\n        for (let j = 0; j <sampleLength; j++) {\n            let randomIndex = Math.floor(Math.random() * dataLength);\n            sample.push(data[randomIndex]);\n        }\n        samples.push(sample);\n    }\n    return samples;\n}\n",
      "status": "[7]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "var numSamples=1000;\nvar sampleLength=1000;\n\nvar samples =  generateSamples(rollingDictList,numSamples,sampleLength);",
      "status": "[8]<br><span style=\"font-size:8px\">16ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "samples.shape()",
      "status": "[9]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "[\n  1000,\n  1000\n] <br>",
      "type": "code"
    },
    {
      "code": "async function trainSamples(baseModel,samples,attributes,target,maxDepth,minLeaf){\n  \t\tlet models={};\n        for(let i=0;i<samples.length;i++){\n\t\t  \tlet sample=samples[i];\n\t\t\t let model = await worker.runInWW(baseModel,sample,attributes,target,maxDepth,minLeaf);\n\t\t     scrib.show(\"generated tree for:\",i);\n\t\t    models[i]=model;\n\t\t}\n  \treturn models;\t\t\n}\nvar models;\ntrainSamples(buildTree,samples,attributes,target,maxDepth,minLeaf)\n.then(opt=>models=opt)\n",
      "status": "[10]<br><span style=\"font-size:8px\">20.596s<span></span></span>",
      "output": "generated tree for: 0 <br>generated tree for: 1 <br>generated tree for: 2 <br>generated tree for: 3 <br>generated tree for: 4 <br>generated tree for: 5 <br>generated tree for: 6 <br>generated tree for: 7 <br>generated tree for: 8 <br>generated tree for: 9 <br>generated tree for: 10 <br>generated tree for: 11 <br>generated tree for: 12 <br>generated tree for: 13 <br>generated tree for: 14 <br>generated tree for: 15 <br>generated tree for: 16 <br>generated tree for: 17 <br>generated tree for: 18 <br>generated tree for: 19 <br>generated tree for: 20 <br>generated tree for: 21 <br>generated tree for: 22 <br>generated tree for: 23 <br>generated tree for: 24 <br>generated tree for: 25 <br>generated tree for: 26 <br>generated tree for: 27 <br>generated tree for: 28 <br>generated tree for: 29 <br>generated tree for: 30 <br>generated tree for: 31 <br>generated tree for: 32 <br>generated tree for: 33 <br>generated tree for: 34 <br>generated tree for: 35 <br>generated tree for: 36 <br>generated tree for: 37 <br>generated tree for: 38 <br>generated tree for: 39 <br>generated tree for: 40 <br>generated tree for: 41 <br>generated tree for: 42 <br>generated tree for: 43 <br>generated tree for: 44 <br>generated tree for: 45 <br>generated tree for: 46 <br>generated tree for: 47 <br>generated tree for: 48 <br>generated tree for: 49 <br>generated tree for: 50 <br>generated tree for: 51 <br>generated tree for: 52 <br>generated tree for: 53 <br>generated tree for: 54 <br>generated tree for: 55 <br>generated tree for: 56 <br>generated tree for: 57 <br>generated tree for: 58 <br>generated tree for: 59 <br>generated tree for: 60 <br>generated tree for: 61 <br>generated tree for: 62 <br>generated tree for: 63 <br>generated tree for: 64 <br>generated tree for: 65 <br>generated tree for: 66 <br>generated tree for: 67 <br>generated tree for: 68 <br>generated tree for: 69 <br>generated tree for: 70 <br>generated tree for: 71 <br>generated tree for: 72 <br>generated tree for: 73 <br>generated tree for: 74 <br>generated tree for: 75 <br>generated tree for: 76 <br>generated tree for: 77 <br>generated tree for: 78 <br>generated tree for: 79 <br>generated tree for: 80 <br>generated tree for: 81 <br>generated tree for: 82 <br>generated tree for: 83 <br>generated tree for: 84 <br>generated tree for: 85 <br>generated tree for: 86 <br>generated tree for: 87 <br>generated tree for: 88 <br>generated tree for: 89 <br>generated tree for: 90 <br>generated tree for: 91 <br>generated tree for: 92 <br>generated tree for: 93 <br>generated tree for: 94 <br>generated tree for: 95 <br>generated tree for: 96 <br>generated tree for: 97 <br>generated tree for: 98 <br>generated tree for: 99 <br>generated tree for: 100 <br>generated tree for: 101 <br>generated tree for: 102 <br>generated tree for: 103 <br>generated tree for: 104 <br>generated tree for: 105 <br>generated tree for: 106 <br>generated tree for: 107 <br>generated tree for: 108 <br>generated tree for: 109 <br>generated tree for: 110 <br>generated tree for: 111 <br>generated tree for: 112 <br>generated tree for: 113 <br>generated tree for: 114 <br>generated tree for: 115 <br>generated tree for: 116 <br>generated tree for: 117 <br>generated tree for: 118 <br>generated tree for: 119 <br>generated tree for: 120 <br>generated tree for: 121 <br>generated tree for: 122 <br>generated tree for: 123 <br>generated tree for: 124 <br>generated tree for: 125 <br>generated tree for: 126 <br>generated tree for: 127 <br>generated tree for: 128 <br>generated tree for: 129 <br>generated tree for: 130 <br>generated tree for: 131 <br>generated tree for: 132 <br>generated tree for: 133 <br>generated tree for: 134 <br>generated tree for: 135 <br>generated tree for: 136 <br>generated tree for: 137 <br>generated tree for: 138 <br>generated tree for: 139 <br>generated tree for: 140 <br>generated tree for: 141 <br>generated tree for: 142 <br>generated tree for: 143 <br>generated tree for: 144 <br>generated tree for: 145 <br>generated tree for: 146 <br>generated tree for: 147 <br>generated tree for: 148 <br>generated tree for: 149 <br>generated tree for: 150 <br>generated tree for: 151 <br>generated tree for: 152 <br>generated tree for: 153 <br>generated tree for: 154 <br>generated tree for: 155 <br>generated tree for: 156 <br>generated tree for: 157 <br>generated tree for: 158 <br>generated tree for: 159 <br>generated tree for: 160 <br>generated tree for: 161 <br>generated tree for: 162 <br>generated tree for: 163 <br>generated tree for: 164 <br>generated tree for: 165 <br>generated tree for: 166 <br>generated tree for: 167 <br>generated tree for: 168 <br>generated tree for: 169 <br>generated tree for: 170 <br>generated tree for: 171 <br>generated tree for: 172 <br>generated tree for: 173 <br>generated tree for: 174 <br>generated tree for: 175 <br>generated tree for: 176 <br>generated tree for: 177 <br>generated tree for: 178 <br>generated tree for: 179 <br>generated tree for: 180 <br>generated tree for: 181 <br>generated tree for: 182 <br>generated tree for: 183 <br>generated tree for: 184 <br>generated tree for: 185 <br>generated tree for: 186 <br>generated tree for: 187 <br>generated tree for: 188 <br>generated tree for: 189 <br>generated tree for: 190 <br>generated tree for: 191 <br>generated tree for: 192 <br>generated tree for: 193 <br>generated tree for: 194 <br>generated tree for: 195 <br>generated tree for: 196 <br>generated tree for: 197 <br>generated tree for: 198 <br>generated tree for: 199 <br>generated tree for: 200 <br>generated tree for: 201 <br>generated tree for: 202 <br>generated tree for: 203 <br>generated tree for: 204 <br>generated tree for: 205 <br>generated tree for: 206 <br>generated tree for: 207 <br>generated tree for: 208 <br>generated tree for: 209 <br>generated tree for: 210 <br>generated tree for: 211 <br>generated tree for: 212 <br>generated tree for: 213 <br>generated tree for: 214 <br>generated tree for: 215 <br>generated tree for: 216 <br>generated tree for: 217 <br>generated tree for: 218 <br>generated tree for: 219 <br>generated tree for: 220 <br>generated tree for: 221 <br>generated tree for: 222 <br>generated tree for: 223 <br>generated tree for: 224 <br>generated tree for: 225 <br>generated tree for: 226 <br>generated tree for: 227 <br>generated tree for: 228 <br>generated tree for: 229 <br>generated tree for: 230 <br>generated tree for: 231 <br>generated tree for: 232 <br>generated tree for: 233 <br>generated tree for: 234 <br>generated tree for: 235 <br>generated tree for: 236 <br>generated tree for: 237 <br>generated tree for: 238 <br>generated tree for: 239 <br>generated tree for: 240 <br>generated tree for: 241 <br>generated tree for: 242 <br>generated tree for: 243 <br>generated tree for: 244 <br>generated tree for: 245 <br>generated tree for: 246 <br>generated tree for: 247 <br>generated tree for: 248 <br>generated tree for: 249 <br>generated tree for: 250 <br>generated tree for: 251 <br>generated tree for: 252 <br>generated tree for: 253 <br>generated tree for: 254 <br>generated tree for: 255 <br>generated tree for: 256 <br>generated tree for: 257 <br>generated tree for: 258 <br>generated tree for: 259 <br>generated tree for: 260 <br>generated tree for: 261 <br>generated tree for: 262 <br>generated tree for: 263 <br>generated tree for: 264 <br>generated tree for: 265 <br>generated tree for: 266 <br>generated tree for: 267 <br>generated tree for: 268 <br>generated tree for: 269 <br>generated tree for: 270 <br>generated tree for: 271 <br>generated tree for: 272 <br>generated tree for: 273 <br>generated tree for: 274 <br>generated tree for: 275 <br>generated tree for: 276 <br>generated tree for: 277 <br>generated tree for: 278 <br>generated tree for: 279 <br>generated tree for: 280 <br>generated tree for: 281 <br>generated tree for: 282 <br>generated tree for: 283 <br>generated tree for: 284 <br>generated tree for: 285 <br>generated tree for: 286 <br>generated tree for: 287 <br>generated tree for: 288 <br>generated tree for: 289 <br>generated tree for: 290 <br>generated tree for: 291 <br>generated tree for: 292 <br>generated tree for: 293 <br>generated tree for: 294 <br>generated tree for: 295 <br>generated tree for: 296 <br>generated tree for: 297 <br>generated tree for: 298 <br>generated tree for: 299 <br>generated tree for: 300 <br>generated tree for: 301 <br>generated tree for: 302 <br>generated tree for: 303 <br>generated tree for: 304 <br>generated tree for: 305 <br>generated tree for: 306 <br>generated tree for: 307 <br>generated tree for: 308 <br>generated tree for: 309 <br>generated tree for: 310 <br>generated tree for: 311 <br>generated tree for: 312 <br>generated tree for: 313 <br>generated tree for: 314 <br>generated tree for: 315 <br>generated tree for: 316 <br>generated tree for: 317 <br>generated tree for: 318 <br>generated tree for: 319 <br>generated tree for: 320 <br>generated tree for: 321 <br>generated tree for: 322 <br>generated tree for: 323 <br>generated tree for: 324 <br>generated tree for: 325 <br>generated tree for: 326 <br>generated tree for: 327 <br>generated tree for: 328 <br>generated tree for: 329 <br>generated tree for: 330 <br>generated tree for: 331 <br>generated tree for: 332 <br>generated tree for: 333 <br>generated tree for: 334 <br>generated tree for: 335 <br>generated tree for: 336 <br>generated tree for: 337 <br>generated tree for: 338 <br>generated tree for: 339 <br>generated tree for: 340 <br>generated tree for: 341 <br>generated tree for: 342 <br>generated tree for: 343 <br>generated tree for: 344 <br>generated tree for: 345 <br>generated tree for: 346 <br>generated tree for: 347 <br>generated tree for: 348 <br>generated tree for: 349 <br>generated tree for: 350 <br>generated tree for: 351 <br>generated tree for: 352 <br>generated tree for: 353 <br>generated tree for: 354 <br>generated tree for: 355 <br>generated tree for: 356 <br>generated tree for: 357 <br>generated tree for: 358 <br>generated tree for: 359 <br>generated tree for: 360 <br>generated tree for: 361 <br>generated tree for: 362 <br>generated tree for: 363 <br>generated tree for: 364 <br>generated tree for: 365 <br>generated tree for: 366 <br>generated tree for: 367 <br>generated tree for: 368 <br>generated tree for: 369 <br>generated tree for: 370 <br>generated tree for: 371 <br>generated tree for: 372 <br>generated tree for: 373 <br>generated tree for: 374 <br>generated tree for: 375 <br>generated tree for: 376 <br>generated tree for: 377 <br>generated tree for: 378 <br>generated tree for: 379 <br>generated tree for: 380 <br>generated tree for: 381 <br>generated tree for: 382 <br>generated tree for: 383 <br>generated tree for: 384 <br>generated tree for: 385 <br>generated tree for: 386 <br>generated tree for: 387 <br>generated tree for: 388 <br>generated tree for: 389 <br>generated tree for: 390 <br>generated tree for: 391 <br>generated tree for: 392 <br>generated tree for: 393 <br>generated tree for: 394 <br>generated tree for: 395 <br>generated tree for: 396 <br>generated tree for: 397 <br>generated tree for: 398 <br>generated tree for: 399 <br>generated tree for: 400 <br>generated tree for: 401 <br>generated tree for: 402 <br>generated tree for: 403 <br>generated tree for: 404 <br>generated tree for: 405 <br>generated tree for: 406 <br>generated tree for: 407 <br>generated tree for: 408 <br>generated tree for: 409 <br>generated tree for: 410 <br>generated tree for: 411 <br>generated tree for: 412 <br>generated tree for: 413 <br>generated tree for: 414 <br>generated tree for: 415 <br>generated tree for: 416 <br>generated tree for: 417 <br>generated tree for: 418 <br>generated tree for: 419 <br>generated tree for: 420 <br>generated tree for: 421 <br>generated tree for: 422 <br>generated tree for: 423 <br>generated tree for: 424 <br>generated tree for: 425 <br>generated tree for: 426 <br>generated tree for: 427 <br>generated tree for: 428 <br>generated tree for: 429 <br>generated tree for: 430 <br>generated tree for: 431 <br>generated tree for: 432 <br>generated tree for: 433 <br>generated tree for: 434 <br>generated tree for: 435 <br>generated tree for: 436 <br>generated tree for: 437 <br>generated tree for: 438 <br>generated tree for: 439 <br>generated tree for: 440 <br>generated tree for: 441 <br>generated tree for: 442 <br>generated tree for: 443 <br>generated tree for: 444 <br>generated tree for: 445 <br>generated tree for: 446 <br>generated tree for: 447 <br>generated tree for: 448 <br>generated tree for: 449 <br>generated tree for: 450 <br>generated tree for: 451 <br>generated tree for: 452 <br>generated tree for: 453 <br>generated tree for: 454 <br>generated tree for: 455 <br>generated tree for: 456 <br>generated tree for: 457 <br>generated tree for: 458 <br>generated tree for: 459 <br>generated tree for: 460 <br>generated tree for: 461 <br>generated tree for: 462 <br>generated tree for: 463 <br>generated tree for: 464 <br>generated tree for: 465 <br>generated tree for: 466 <br>generated tree for: 467 <br>generated tree for: 468 <br>generated tree for: 469 <br>generated tree for: 470 <br>generated tree for: 471 <br>generated tree for: 472 <br>generated tree for: 473 <br>generated tree for: 474 <br>generated tree for: 475 <br>generated tree for: 476 <br>generated tree for: 477 <br>generated tree for: 478 <br>generated tree for: 479 <br>generated tree for: 480 <br>generated tree for: 481 <br>generated tree for: 482 <br>generated tree for: 483 <br>generated tree for: 484 <br>generated tree for: 485 <br>generated tree for: 486 <br>generated tree for: 487 <br>generated tree for: 488 <br>generated tree for: 489 <br>generated tree for: 490 <br>generated tree for: 491 <br>generated tree for: 492 <br>generated tree for: 493 <br>generated tree for: 494 <br>generated tree for: 495 <br>generated tree for: 496 <br>generated tree for: 497 <br>generated tree for: 498 <br>generated tree for: 499 <br>generated tree for: 500 <br>generated tree for: 501 <br>generated tree for: 502 <br>generated tree for: 503 <br>generated tree for: 504 <br>generated tree for: 505 <br>generated tree for: 506 <br>generated tree for: 507 <br>generated tree for: 508 <br>generated tree for: 509 <br>generated tree for: 510 <br>generated tree for: 511 <br>generated tree for: 512 <br>generated tree for: 513 <br>generated tree for: 514 <br>generated tree for: 515 <br>generated tree for: 516 <br>generated tree for: 517 <br>generated tree for: 518 <br>generated tree for: 519 <br>generated tree for: 520 <br>generated tree for: 521 <br>generated tree for: 522 <br>generated tree for: 523 <br>generated tree for: 524 <br>generated tree for: 525 <br>generated tree for: 526 <br>generated tree for: 527 <br>generated tree for: 528 <br>generated tree for: 529 <br>generated tree for: 530 <br>generated tree for: 531 <br>generated tree for: 532 <br>generated tree for: 533 <br>generated tree for: 534 <br>generated tree for: 535 <br>generated tree for: 536 <br>generated tree for: 537 <br>generated tree for: 538 <br>generated tree for: 539 <br>generated tree for: 540 <br>generated tree for: 541 <br>generated tree for: 542 <br>generated tree for: 543 <br>generated tree for: 544 <br>generated tree for: 545 <br>generated tree for: 546 <br>generated tree for: 547 <br>generated tree for: 548 <br>generated tree for: 549 <br>generated tree for: 550 <br>generated tree for: 551 <br>generated tree for: 552 <br>generated tree for: 553 <br>generated tree for: 554 <br>generated tree for: 555 <br>generated tree for: 556 <br>generated tree for: 557 <br>generated tree for: 558 <br>generated tree for: 559 <br>generated tree for: 560 <br>generated tree for: 561 <br>generated tree for: 562 <br>generated tree for: 563 <br>generated tree for: 564 <br>generated tree for: 565 <br>generated tree for: 566 <br>generated tree for: 567 <br>generated tree for: 568 <br>generated tree for: 569 <br>generated tree for: 570 <br>generated tree for: 571 <br>generated tree for: 572 <br>generated tree for: 573 <br>generated tree for: 574 <br>generated tree for: 575 <br>generated tree for: 576 <br>generated tree for: 577 <br>generated tree for: 578 <br>generated tree for: 579 <br>generated tree for: 580 <br>generated tree for: 581 <br>generated tree for: 582 <br>generated tree for: 583 <br>generated tree for: 584 <br>generated tree for: 585 <br>generated tree for: 586 <br>generated tree for: 587 <br>generated tree for: 588 <br>generated tree for: 589 <br>generated tree for: 590 <br>generated tree for: 591 <br>generated tree for: 592 <br>generated tree for: 593 <br>generated tree for: 594 <br>generated tree for: 595 <br>generated tree for: 596 <br>generated tree for: 597 <br>generated tree for: 598 <br>generated tree for: 599 <br>generated tree for: 600 <br>generated tree for: 601 <br>generated tree for: 602 <br>generated tree for: 603 <br>generated tree for: 604 <br>generated tree for: 605 <br>generated tree for: 606 <br>generated tree for: 607 <br>generated tree for: 608 <br>generated tree for: 609 <br>generated tree for: 610 <br>generated tree for: 611 <br>generated tree for: 612 <br>generated tree for: 613 <br>generated tree for: 614 <br>generated tree for: 615 <br>generated tree for: 616 <br>generated tree for: 617 <br>generated tree for: 618 <br>generated tree for: 619 <br>generated tree for: 620 <br>generated tree for: 621 <br>generated tree for: 622 <br>generated tree for: 623 <br>generated tree for: 624 <br>generated tree for: 625 <br>generated tree for: 626 <br>generated tree for: 627 <br>generated tree for: 628 <br>generated tree for: 629 <br>generated tree for: 630 <br>generated tree for: 631 <br>generated tree for: 632 <br>generated tree for: 633 <br>generated tree for: 634 <br>generated tree for: 635 <br>generated tree for: 636 <br>generated tree for: 637 <br>generated tree for: 638 <br>generated tree for: 639 <br>generated tree for: 640 <br>generated tree for: 641 <br>generated tree for: 642 <br>generated tree for: 643 <br>generated tree for: 644 <br>generated tree for: 645 <br>generated tree for: 646 <br>generated tree for: 647 <br>generated tree for: 648 <br>generated tree for: 649 <br>generated tree for: 650 <br>generated tree for: 651 <br>generated tree for: 652 <br>generated tree for: 653 <br>generated tree for: 654 <br>generated tree for: 655 <br>generated tree for: 656 <br>generated tree for: 657 <br>generated tree for: 658 <br>generated tree for: 659 <br>generated tree for: 660 <br>generated tree for: 661 <br>generated tree for: 662 <br>generated tree for: 663 <br>generated tree for: 664 <br>generated tree for: 665 <br>generated tree for: 666 <br>generated tree for: 667 <br>generated tree for: 668 <br>generated tree for: 669 <br>generated tree for: 670 <br>generated tree for: 671 <br>generated tree for: 672 <br>generated tree for: 673 <br>generated tree for: 674 <br>generated tree for: 675 <br>generated tree for: 676 <br>generated tree for: 677 <br>generated tree for: 678 <br>generated tree for: 679 <br>generated tree for: 680 <br>generated tree for: 681 <br>generated tree for: 682 <br>generated tree for: 683 <br>generated tree for: 684 <br>generated tree for: 685 <br>generated tree for: 686 <br>generated tree for: 687 <br>generated tree for: 688 <br>generated tree for: 689 <br>generated tree for: 690 <br>generated tree for: 691 <br>generated tree for: 692 <br>generated tree for: 693 <br>generated tree for: 694 <br>generated tree for: 695 <br>generated tree for: 696 <br>generated tree for: 697 <br>generated tree for: 698 <br>generated tree for: 699 <br>generated tree for: 700 <br>generated tree for: 701 <br>generated tree for: 702 <br>generated tree for: 703 <br>generated tree for: 704 <br>generated tree for: 705 <br>generated tree for: 706 <br>generated tree for: 707 <br>generated tree for: 708 <br>generated tree for: 709 <br>generated tree for: 710 <br>generated tree for: 711 <br>generated tree for: 712 <br>generated tree for: 713 <br>generated tree for: 714 <br>generated tree for: 715 <br>generated tree for: 716 <br>generated tree for: 717 <br>generated tree for: 718 <br>generated tree for: 719 <br>generated tree for: 720 <br>generated tree for: 721 <br>generated tree for: 722 <br>generated tree for: 723 <br>generated tree for: 724 <br>generated tree for: 725 <br>generated tree for: 726 <br>generated tree for: 727 <br>generated tree for: 728 <br>generated tree for: 729 <br>generated tree for: 730 <br>generated tree for: 731 <br>generated tree for: 732 <br>generated tree for: 733 <br>generated tree for: 734 <br>generated tree for: 735 <br>generated tree for: 736 <br>generated tree for: 737 <br>generated tree for: 738 <br>generated tree for: 739 <br>generated tree for: 740 <br>generated tree for: 741 <br>generated tree for: 742 <br>generated tree for: 743 <br>generated tree for: 744 <br>generated tree for: 745 <br>generated tree for: 746 <br>generated tree for: 747 <br>generated tree for: 748 <br>generated tree for: 749 <br>generated tree for: 750 <br>generated tree for: 751 <br>generated tree for: 752 <br>generated tree for: 753 <br>generated tree for: 754 <br>generated tree for: 755 <br>generated tree for: 756 <br>generated tree for: 757 <br>generated tree for: 758 <br>generated tree for: 759 <br>generated tree for: 760 <br>generated tree for: 761 <br>generated tree for: 762 <br>generated tree for: 763 <br>generated tree for: 764 <br>generated tree for: 765 <br>generated tree for: 766 <br>generated tree for: 767 <br>generated tree for: 768 <br>generated tree for: 769 <br>generated tree for: 770 <br>generated tree for: 771 <br>generated tree for: 772 <br>generated tree for: 773 <br>generated tree for: 774 <br>generated tree for: 775 <br>generated tree for: 776 <br>generated tree for: 777 <br>generated tree for: 778 <br>generated tree for: 779 <br>generated tree for: 780 <br>generated tree for: 781 <br>generated tree for: 782 <br>generated tree for: 783 <br>generated tree for: 784 <br>generated tree for: 785 <br>generated tree for: 786 <br>generated tree for: 787 <br>generated tree for: 788 <br>generated tree for: 789 <br>generated tree for: 790 <br>generated tree for: 791 <br>generated tree for: 792 <br>generated tree for: 793 <br>generated tree for: 794 <br>generated tree for: 795 <br>generated tree for: 796 <br>generated tree for: 797 <br>generated tree for: 798 <br>generated tree for: 799 <br>generated tree for: 800 <br>generated tree for: 801 <br>generated tree for: 802 <br>generated tree for: 803 <br>generated tree for: 804 <br>generated tree for: 805 <br>generated tree for: 806 <br>generated tree for: 807 <br>generated tree for: 808 <br>generated tree for: 809 <br>generated tree for: 810 <br>generated tree for: 811 <br>generated tree for: 812 <br>generated tree for: 813 <br>generated tree for: 814 <br>generated tree for: 815 <br>generated tree for: 816 <br>generated tree for: 817 <br>generated tree for: 818 <br>generated tree for: 819 <br>generated tree for: 820 <br>generated tree for: 821 <br>generated tree for: 822 <br>generated tree for: 823 <br>generated tree for: 824 <br>generated tree for: 825 <br>generated tree for: 826 <br>generated tree for: 827 <br>generated tree for: 828 <br>generated tree for: 829 <br>generated tree for: 830 <br>generated tree for: 831 <br>generated tree for: 832 <br>generated tree for: 833 <br>generated tree for: 834 <br>generated tree for: 835 <br>generated tree for: 836 <br>generated tree for: 837 <br>generated tree for: 838 <br>generated tree for: 839 <br>generated tree for: 840 <br>generated tree for: 841 <br>generated tree for: 842 <br>generated tree for: 843 <br>generated tree for: 844 <br>generated tree for: 845 <br>generated tree for: 846 <br>generated tree for: 847 <br>generated tree for: 848 <br>generated tree for: 849 <br>generated tree for: 850 <br>generated tree for: 851 <br>generated tree for: 852 <br>generated tree for: 853 <br>generated tree for: 854 <br>generated tree for: 855 <br>generated tree for: 856 <br>generated tree for: 857 <br>generated tree for: 858 <br>generated tree for: 859 <br>generated tree for: 860 <br>generated tree for: 861 <br>generated tree for: 862 <br>generated tree for: 863 <br>generated tree for: 864 <br>generated tree for: 865 <br>generated tree for: 866 <br>generated tree for: 867 <br>generated tree for: 868 <br>generated tree for: 869 <br>generated tree for: 870 <br>generated tree for: 871 <br>generated tree for: 872 <br>generated tree for: 873 <br>generated tree for: 874 <br>generated tree for: 875 <br>generated tree for: 876 <br>generated tree for: 877 <br>generated tree for: 878 <br>generated tree for: 879 <br>generated tree for: 880 <br>generated tree for: 881 <br>generated tree for: 882 <br>generated tree for: 883 <br>generated tree for: 884 <br>generated tree for: 885 <br>generated tree for: 886 <br>generated tree for: 887 <br>generated tree for: 888 <br>generated tree for: 889 <br>generated tree for: 890 <br>generated tree for: 891 <br>generated tree for: 892 <br>generated tree for: 893 <br>generated tree for: 894 <br>generated tree for: 895 <br>generated tree for: 896 <br>generated tree for: 897 <br>generated tree for: 898 <br>generated tree for: 899 <br>generated tree for: 900 <br>generated tree for: 901 <br>generated tree for: 902 <br>generated tree for: 903 <br>generated tree for: 904 <br>generated tree for: 905 <br>generated tree for: 906 <br>generated tree for: 907 <br>generated tree for: 908 <br>generated tree for: 909 <br>generated tree for: 910 <br>generated tree for: 911 <br>generated tree for: 912 <br>generated tree for: 913 <br>generated tree for: 914 <br>generated tree for: 915 <br>generated tree for: 916 <br>generated tree for: 917 <br>generated tree for: 918 <br>generated tree for: 919 <br>generated tree for: 920 <br>generated tree for: 921 <br>generated tree for: 922 <br>generated tree for: 923 <br>generated tree for: 924 <br>generated tree for: 925 <br>generated tree for: 926 <br>generated tree for: 927 <br>generated tree for: 928 <br>generated tree for: 929 <br>generated tree for: 930 <br>generated tree for: 931 <br>generated tree for: 932 <br>generated tree for: 933 <br>generated tree for: 934 <br>generated tree for: 935 <br>generated tree for: 936 <br>generated tree for: 937 <br>generated tree for: 938 <br>generated tree for: 939 <br>generated tree for: 940 <br>generated tree for: 941 <br>generated tree for: 942 <br>generated tree for: 943 <br>generated tree for: 944 <br>generated tree for: 945 <br>generated tree for: 946 <br>generated tree for: 947 <br>generated tree for: 948 <br>generated tree for: 949 <br>generated tree for: 950 <br>generated tree for: 951 <br>generated tree for: 952 <br>generated tree for: 953 <br>generated tree for: 954 <br>generated tree for: 955 <br>generated tree for: 956 <br>generated tree for: 957 <br>generated tree for: 958 <br>generated tree for: 959 <br>generated tree for: 960 <br>generated tree for: 961 <br>generated tree for: 962 <br>generated tree for: 963 <br>generated tree for: 964 <br>generated tree for: 965 <br>generated tree for: 966 <br>generated tree for: 967 <br>generated tree for: 968 <br>generated tree for: 969 <br>generated tree for: 970 <br>generated tree for: 971 <br>generated tree for: 972 <br>generated tree for: 973 <br>generated tree for: 974 <br>generated tree for: 975 <br>generated tree for: 976 <br>generated tree for: 977 <br>generated tree for: 978 <br>generated tree for: 979 <br>generated tree for: 980 <br>generated tree for: 981 <br>generated tree for: 982 <br>generated tree for: 983 <br>generated tree for: 984 <br>generated tree for: 985 <br>generated tree for: 986 <br>generated tree for: 987 <br>generated tree for: 988 <br>generated tree for: 989 <br>generated tree for: 990 <br>generated tree for: 991 <br>generated tree for: 992 <br>generated tree for: 993 <br>generated tree for: 994 <br>generated tree for: 995 <br>generated tree for: 996 <br>generated tree for: 997 <br>generated tree for: 998 <br>generated tree for: 999 <br><p class=\"error\">Object too large to show.</p><br>",
      "type": "code"
    },
    {
      "code": "Object.keys(models[100].children)",
      "status": "[11]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "[\n  \"1:\\\"code\\\":\",\n  \"1:actual\",\n  \"1:response\",\n  \"1:token\\\\n\\\\nconst\",\n  \"1:\\\"output\\\":\",\n  \"1:{\",\n  \"1:\\\"\\\",\",\n  \"1:=\",\n  \"1:},\"\n] <br>",
      "type": "code"
    },
    {
      "code": "[\" \"]+\"I like the castle was\".split(\" \").reverse()",
      "status": "[12]<br><span style=\"font-size:8px\">4ms<span></span></span>",
      "output": " was,castle,the,like,I <br>",
      "type": "code"
    },
    {
      "code": "for(let  i in models){\n  \n  let prediction=predict(models[i],\"I like the\".split(\" \").reverse());\n  console.log(i);\n if(prediction) show(prediction);\n\t\t \n\t\t  }",
      "status": "[14]<br><span style=\"font-size:8px\">6ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}