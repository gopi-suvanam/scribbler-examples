{
  "metadata": {
    "name": "AI-Podcast-Generator",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n        <br><h1  style=\"color:#555\">AI Podcast Generator</h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n        Notebook for Podcast generator using Gemini API\n    </p><br></div>",
      "status": "",
      "output": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n        <br><h1 style=\"color:#555\">AI Podcast Generator</h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n        Notebook for Podcast generator using Gemini API\n    </p><br></div>",
      "type": "html"
    },
    {
      "code": "prompt=\"Explain how AI works\";",
      "status": "[1]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "Explain how AI works <br>",
      "type": "code"
    },
    {
      "code": "//>md\n### Steps to follow\n- Get Gemini API key here: <a href='https://aistudio.google.com/apikey' target=\"_blank\">https://aistudio.google.com/apikey</a>\n- Save it here: <a href=\"https://app.scribbler.live/secrets.html\" target=\"_blank\">Scribbler Secrets</a>. Use the name \"GOOGLE-API_KEY\"\n- Take the notebook out of sandbox byt clicking red button at the top right corner.\n- Run rest of the code. change the prompt above to whatever you like.\n",
      "status": "",
      "output": "<h3>Steps to follow</h3>\n<ul>\n<li>Get Gemini API key here: <a href=\"https://aistudio.google.com/apikey\" target=\"_blank\">https://aistudio.google.com/apikey</a></li>\n<li>Save it here: <a href=\"https://app.scribbler.live/secrets.html\" target=\"_blank\">Scribbler Secrets</a>. Use the name \"GOOGLE-API_KEY\"</li>\n<li>Take the notebook out of sandbox byt clicking red button at the top right corner.</li>\n<li>Run rest of the code. change the prompt above to whatever you like.</li>\n</ul>\n",
      "type": "html"
    },
    {
      "code": "const apiKey = scrib.getSecret(\"GOOGLE-API-KEY\");\nif(typeof(apikey)=='undefined') scrib.error(\"Couldn't find the API key\");\n    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;\n    const data = {\n      \"contents\": [\n        {\n          \"parts\": [\n            {\n              \"text\": \"Generate a podcast for this prompt (split into host and guest. The gues name is Kendra and host name is Stan. do not give sound effects):\"+prompt\n            }\n          ]\n        }\n      ]\n    };\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n\nwindow.result = await response.json();",
      "status": "[2]<br><span style=\"font-size:8px\">5.436s<span></span></span>",
      "output": "<p class=\"red\">Couldn't find the API key</p> <br>",
      "type": "code"
    },
    {
      "code": "\nif(result){\n  result.candidates[0].content.parts.forEach(text=>{\n\tscrib.show(marked.marked(text.text));\n  } );\n}\n",
      "status": "[1]<br><span style=\"font-size:8px\">87ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "if(result){\n  result.candidates[0].content.parts.forEach(text=>{\n\tconst htmlString = \"<p>Hello, <strong>World!</strong></p>\";\n  const plainText = document.createElement(\"div\");\n  plainText.innerHTML = marked.marked(text.text);\n\n\tconst lines = plainText.innerText.split('\\n');\n\tconst conversation = [];\n\n\tlines.forEach(line => {\n\t  const match = line.match(/(Stan|Kendra): (.*)/);\n\t  if (match) {\n\t\tconversation.push({\n\t\t  speaker: match[1],\n\t\t  text: match[2]\n\t\t});\n\t  }\n\t});\n\twindow.conversation=(conversation)\n\t\n\t\n  } );\n}",
      "status": "[4]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "conversation",
      "status": "[2]<br><span style=\"font-size:8px\">6ms<span></span></span>",
      "output": " <br>",
      "type": "code"
    },
    {
      "code": "// Define voices\nlet voices = window.speechSynthesis.getVoices();\n\n// Define voice for Host (male) and Guest (female)\nconst hostVoice = voices.find(voice => voice.name.includes('English Male'));\nconst guestVoice = voices.find(voice => voice.name.includes('English Female'));\n// Index to track current line\nlet currentIndex = 0;\n\n// Function to speak next line\nfunction speakNextLine() {\n  console.log(currentIndex);\n  if (currentIndex < conversation.length) {\n    const line = conversation[currentIndex];\n    const utterance = new SpeechSynthesisUtterance(line.text);\n    console.log(line.text);\n    // Set voice based on speaker\n    if (line.speaker === 'Stan') {\n\t  \n      utterance.voice = hostVoice;\n    } else {\n      utterance.voice = guestVoice;\n    }\n    scrib.show(line.text,utterance.voice.name);\n    // Speak\n    utterance.onend = () => {\n      currentIndex++;\n      speakNextLine();\n    };\n    window.speechSynthesis.speak(utterance);\n  }\n}\n\n// Start speaking\nspeakNextLine();",
      "status": "[6]<br><span style=\"font-size:8px\">6ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}