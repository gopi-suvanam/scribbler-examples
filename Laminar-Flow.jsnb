{
  "metadata": {
    "name": "Laminar Flow",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<h1>Particle Flow Simulation with Obstacle Interaction</h1>\nThe application simulates particle movement in a 2D space, with randomly generated particles entering from the left side of the canvas and bouncing off the top and bottom boundaries. The particles interact with a circular obstacle positioned in the center of the canvas, deflecting upon collision. The animation continues indefinitely, providing a visual representation of particle dynamics in the presence of an obstacle.\n\n",
      "status": "",
      "output": "<h1>Particle Flow Simulation with Obstacle Interaction</h1>\nThe application simulates particle movement in a 2D space, with randomly generated particles entering from the left side of the canvas and bouncing off the top and bottom boundaries. The particles interact with a circular obstacle positioned in the center of the canvas, deflecting upon collision. The animation continues indefinitely, providing a visual representation of particle dynamics in the presence of an obstacle.\n\n",
      "type": "html"
    },
    {
      "code": "  <canvas id=\"particleFlowCanvas\" width=\"600\" height=\"400\" style=\"border:thin solid purple\"></canvas>\n",
      "status": "",
      "output": "  <canvas id=\"particleFlowCanvas\" width=\"600\" height=\"400\" style=\"border:thin solid purple\"></canvas>\n",
      "type": "html"
    },
    {
      "code": "//Parameters\n canvas = document.getElementById('particleFlowCanvas');\n\nconst width = canvas.width;\nconst height = canvas.height;\n\n particleRadius = 3;\n particleSpeed = 10;\n obstacle = {\n  x: width / 2,\n  y: height / 2,\n  radius: 20\n};\n\nnumberOfParticles = 10000;",
      "status": "[32]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "10000 <br>",
      "type": "code"
    },
    {
      "code": "<h2>Code Explanation</h2>\nThe JavaScript code utilizes the HTML5 Canvas API to create a particle simulation. It defines an animated loop that updates the particle positions, checks for collisions with the circular obstacle, and reflects the particles accordingly. The obstacle is drawn as a filled circle, and particles are represented as colored circles. Collision detection involves calculating the distance between particles and the obstacle, adjusting particle velocities upon collision. The application incorporates trigonometric functions to initialize particle velocities and maintains an array to store particle properties. The code structure includes functions for particle creation, animation, collision handling, and rendering.\n\n\n\n\n",
      "status": "",
      "output": "<h2>Code Explanation</h2>\nThe JavaScript code utilizes the HTML5 Canvas API to create a particle simulation. It defines an animated loop that updates the particle positions, checks for collisions with the circular obstacle, and reflects the particles accordingly. The obstacle is drawn as a filled circle, and particles are represented as colored circles. Collision detection involves calculating the distance between particles and the obstacle, adjusting particle velocities upon collision. The application incorporates trigonometric functions to initialize particle velocities and maintains an array to store particle properties. The code structure includes functions for particle creation, animation, collision handling, and rendering.\n\n\n\n\n",
      "type": "html"
    },
    {
      "code": "\nconst ctx = canvas.getContext('2d');\n\nconst width = canvas.width;\nconst height = canvas.height;\n\nconst particles = [];\n\n\nfunction createParticle() {\n  const angle = Math.random() * 2 * Math.PI;\n  return {\n    x: 0,\n    y: Math.random() * height,\n    vx: particleSpeed * Math.cos(angle),\n    vy: particleSpeed * Math.sin(angle),\n    color: `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`\n  };\n}\n\nfunction moveParticles() {\n  for (let i = 0; i < particles.length; i++) {\n    particles[i].x += particles[i].vx;\n    particles[i].y += particles[i].vy;\n\n    // Check for collision with the circle obstacle\n    const distance = Math.sqrt((particles[i].x - obstacle.x) ** 2 + (particles[i].y - obstacle.y) ** 2);\n\n    if (distance < particleRadius + obstacle.radius) {\n      // Reflect the particle upon collision with the obstacle\n      const normal = { x: particles[i].x - obstacle.x, y: particles[i].y - obstacle.y };\n      const length = Math.sqrt(normal.x * normal.x + normal.y * normal.y);\n\n      normal.x /= length;\n      normal.y /= length;\n\n      const dotProduct = particles[i].vx * normal.x + particles[i].vy * normal.y;\n\n      particles[i].vx -= 2 * dotProduct * normal.x;\n      particles[i].vy -= 2 * dotProduct * normal.y;\n\n      // Move particle slightly away from the obstacle to prevent consecutive collisions\n      particles[i].x += normal.x * (particleRadius + obstacle.radius);\n      particles[i].y += normal.y * (particleRadius + obstacle.radius);\n    }\n\n    // Check for collision with top and bottom boundaries\n    if (particles[i].y - particleRadius < 0 || particles[i].y + particleRadius > height) {\n      particles[i].vy *= -1; // Reflect off the top and bottom boundaries\n    }\n\n    // Check if particle is out of the canvas on the right side, if so, create a new one on the left\n    if (particles[i].x > width + particleRadius) {\n      particles[i] = createParticle();\n    }\n  }\n}\n\nfunction drawParticles() {\n  ctx.clearRect(0, 0, width, height);\n\n  // Draw obstacle (circle)\n  ctx.beginPath();\n  ctx.arc(obstacle.x, obstacle.y, obstacle.radius, 0, 2 * Math.PI);\n  ctx.fillStyle = 'gray';\n  ctx.fill();\n  ctx.closePath();\n\n  // Draw particles\n  for (let i = 0; i < particles.length; i++) {\n    ctx.beginPath();\n    ctx.arc(particles[i].x, particles[i].y, particleRadius, 0, 2 * Math.PI);\n    ctx.fillStyle = particles[i].color;\n    ctx.fill();\n    ctx.closePath();\n  }\n}\n\nfunction animate() {\n  moveParticles();\n  drawParticles();\n  requestAnimationFrame(animate);\n}\n\n// Initialize particles\nfor (let i = 0; i < numberOfParticles; i++) {\n  particles.push(createParticle());\n}\n\nanimate();\n",
      "status": "[34]<br><span style=\"font-size:8px\">182ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": true
}