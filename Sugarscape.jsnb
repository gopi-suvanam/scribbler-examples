{
  "metadata": {
    "name": "Sugarscape",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<h1>Sugarscape Modeling </h1>\n<i>The Sugarscape model is a powerful tool for understanding complex social dynamics through simple rules.</i>",
      "status": "",
      "output": "<h1>Sugarscape Modeling </h1>\n<i>The Sugarscape model is a powerful tool for understanding complex social dynamics through simple rules.</i>",
      "type": "html"
    },
    {
      "code": "    <style>\n        canvas {\n            border: 1px solid black;\n        }\n    </style>\n\n    <canvas id=\"canvas\" width=\"600\" height=\"600\"></canvas>\n",
      "status": "",
      "output": "    <style>\n        canvas {\n            border: 1px solid black;\n        }\n    </style>\n\n    <canvas id=\"canvas\" width=\"600\" height=\"600\"></canvas>\n",
      "type": "html"
    },
    {
      "code": "var canvas = document.getElementById('canvas');\nvar ctx = canvas.getContext('2d');\nvar gridSize = 50;\nvar cellSize = canvas.width / gridSize;\n\n// Initialize Sugarscape grid with random sugar values\nvar sugarGrid = [];\nfor (let i = 0; i < gridSize; i++) {\n    sugarGrid[i] = [];\n    for (let j = 0; j < gridSize; j++) {\n        sugarGrid[i][j] = Math.floor(Math.random() * 4);\n    }\n}\n\n// Draw the Sugarscape grid\nfunction drawGrid() {\n    for (let i = 0; i < gridSize; i++) {\n        for (let j = 0; j < gridSize; j++) {\n            const sugar = sugarGrid[i][j];\n            ctx.fillStyle = `rgb(${sugar * 63}, ${sugar * 63}, 0)`;\n            ctx.fillRect(i * cellSize, j * cellSize, cellSize, cellSize);\n        }\n    }\n}",
      "status": "[440]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "3 <br>",
      "type": "code"
    },
    {
      "code": "drawGrid()",
      "status": "[441]<br><span style=\"font-size:8px\">4ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "class Agent {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.sugar = 20;  // Initial sugar endowment\n        this.metabolism = Math.floor(Math.random() * 3) + 1;  // Sugar consumed per step\n        this.vision = Math.floor(Math.random() * 3) + 1;  // How far the agent can see\n\t  \n\t          this.age = 0;\n        this.maxAge = Math.floor(Math.random() * 50) + 50;  // Agents live between 50 and 100 steps\n    }\n\n    // Move the agent to the location with the most sugar within its vision\n     move() {\n        let bestX = this.x, bestY = this.y, maxSugar = sugarGrid[this.x][this.y];\n        for (let dx = -this.vision; dx <= this.vision; dx++) {\n            for (let dy = -this.vision; dy <= this.vision; dy++) {\n                const newX = (this.x + dx + gridSize) % gridSize;\n                const newY = (this.y + dy + gridSize) % gridSize;\n                if (sugarGrid[newX][newY] > maxSugar) {\n                    bestX = newX;\n                    bestY = newY;\n                    maxSugar = sugarGrid[newX][newY];\n                }\n            }\n        }\n        this.x = bestX;\n        this.y = bestY;\n        this.sugar += sugarGrid[this.x][this.y];\n        sugarGrid[this.x][this.y] = 0;\n        this.sugar -= this.metabolism;\n        if (this.sugar <= 0) this.die();\n    }\n\n    // Handle agent death (remove from simulation)\n    die() {\n        const index = agents.indexOf(this);\n        if (index > -1) {\n            agents.splice(index, 1);\n        }\n    }\n  \n      // Handle agent reproduction\n    reproduce() {\n        const childX = (this.x + Math.floor(Math.random() * 3) - 1 + gridSize) % gridSize;\n        const childY = (this.y + Math.floor(Math.random() * 3) - 1 + gridSize) % gridSize;\n        agents.push(new Agent(childX, childY));\n    }\n\n    // Draw the agent\n    draw() {\n        ctx.fillStyle = 'blue';\n        ctx.fillRect(this.x * cellSize, this.y * cellSize, cellSize, cellSize);\n    }\n}\n\nvar agents = [];\nvar numAgents = 100;\n\n// Initialize agents with random positions\nfor (let i = 0; i < numAgents; i++) {\n    const x = Math.floor(Math.random() * gridSize);\n    const y = Math.floor(Math.random() * gridSize);\n    agents.push(new Agent(x, y));\n}\n\n\nconst maxSugar = 4; // Maximum amount of sugar in any cell\nconst regenRate = 1; // Amount of sugar regenerated per time step\n\nfunction regenerateSugar() {\n    for (let i = 0; i < gridSize; i++) {\n        for (let j = 0; j < gridSize; j++) {\n            sugarGrid[i][j] = Math.min(sugarGrid[i][j] + regenRate, maxSugar);\n        }\n    }\n}\n\n\nfunction update() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawGrid();\n   regenerateSugar();\n    for (const agent of agents) {\n        agent.move();\n        agent.draw();\n    }\n  \n  //Pause\n  setTimeout(function(){\n\trequestAnimationFrame(update);\n  }, 1000);\n    \n}\n\nupdate();",
      "status": "[442]<br><span style=\"font-size:8px\">7ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "",
      "status": "[443]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": true
}